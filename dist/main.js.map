{"version":3,"file":"main.js","sources":["../src/main.js","../src/typescript.js"],"sourcesContent":["import { CompositeDisposable } from \"atom\"\nimport { setupTypeScript } from \"./typescript.js\"\n\nlet subscriptions\n\n/**\n * called by Atom when activating an extension\n * @param  {any} state the current state of atom\n */\nexport function activate(state) {\n  // Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable\n  subscriptions = new CompositeDisposable()\n\n  package_deps()\n    .then(() => {\n      setupTypeScript()\n    })\n    .catch((e) => {\n      atom.notifications.addError(\"atom-ide-javascript failed in installing its dependencies.\")\n    })\n}\n\n/**\n * install Atom package dependencies if not already loaded\n */\nasync function package_deps() {\n  // Add entries from package-deps here manually\n  // (to prevent loading atom-package-deps and package.json when the deps are already loaded)\n  const deps = [\"atom-ide-base\", \"atom-typescript\", \"linter-eslint\", \"autocomplete-paths\", \"javascript-drag-import\"]\n  if (deps.some((p) => !atom.packages.isPackageLoaded(p))) {\n    await import(\"atom-package-deps\").then((atom_package_deps) => {\n      // install if not installed\n      atom_package_deps.install(\"atom-ide-javascript\", false)\n      // enable if disabled\n      deps\n        .filter((p) => !atom.packages.isPackageLoaded(p))\n        .forEach((p) => {\n          atom.notifications.addInfo(`Enabling package ${p} that is needed for atom-ide-javascript`)\n          atom.packages.enablePackage(p)\n        })\n    })\n  }\n}\n\n/**\n * called by Atom when deactivating an extension\n */\nexport function deactivate() {\n  if (subscriptions) {\n    subscriptions.dispose()\n  }\n  subscriptions = null\n}\n","// This configures atom-typescript\nexport function setupTypeScript() {\n  // use atom-typescript for javascript\n  atom.config.set(\"atom-typescript.allowJS\", true)\n  // disable check files which slows down Atom\n  atom.config.set(\"atom-typescript.checkAllFilesOnSave\", false)\n  // activate atom-typescript\n  atom.commands.dispatch(atom.workspace.getElement(), \"typescript:activate\")\n  // support flow in JavaScript files\n  const ignoredDiagnosticCodes = Array.from(\n    new Set(\n      atom.config.get(\"atom-typescript.ignoredDiagnosticCodes\").concat([\"8002\", \"8003\", \"8004\", \"8006\", \"8008\", \"8010\"])\n    )\n  )\n  atom.config.set(\"atom-typescript.ignoredDiagnosticCodes\", ignoredDiagnosticCodes)\n}\n\n/*\n\"'import ... =' can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8002\n},\n\"'export =' can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8003\n},\n\"Type parameter declarations can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8004\n},\n\"'implements' clauses can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8005\n},\n\"'{0}' declarations can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8006\n},\n\"Type aliases can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8008\n},\n\"The '{0}' modifier can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8009\n},\n\"Type annotations can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8010\n},\n\"Type arguments can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8011\n},\n\"Parameter modifiers can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8012\n},\n\"Non-null assertions can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8013\n},\n\"Type assertion expressions can only be used in TypeScript files.\": {\n    \"category\": \"Error\",\n    \"code\": 8016\n},\n*/\n"],"names":["subscriptions","state","CompositeDisposable","async","deps","some","p","atom","packages","isPackageLoaded","Promise","then","atom_package_deps","install","filter","forEach","notifications","addInfo","enablePackage","package_deps","config","set","commands","dispatch","workspace","getElement","ignoredDiagnosticCodes","Array","from","Set","get","concat","setupTypeScript","catch","e","addError","dispose"],"mappings":"0FAGA,IAAIA,mBAMG,SAAkBC,GAEvBD,EAAgB,IAAIE,sBActBC,uBAGQC,EAAO,CAAC,gBAAiB,kBAAmB,gBAAiB,qBAAsB,0BACrFA,EAAKC,KAAMC,IAAOC,KAAKC,SAASC,gBAAgBH,WAC5CI,kDAAO,8DAAqBC,KAAMC,IAEtCA,EAAkBC,QAAQ,uBAAuB,GAEjDT,EACGU,OAAQR,IAAOC,KAAKC,SAASC,gBAAgBH,IAC7CS,QAAST,IACRC,KAAKS,cAAcC,QAAS,oBAAmBX,4CAC/CC,KAAKC,SAASU,cAAcZ,OAzBpCa,GACGR,KAAK,MCbH,WAELJ,KAAKa,OAAOC,IAAI,2BAA2B,GAE3Cd,KAAKa,OAAOC,IAAI,uCAAuC,GAEvDd,KAAKe,SAASC,SAAShB,KAAKiB,UAAUC,aAAc,6BAE9CC,EAAyBC,MAAMC,KACnC,IAAIC,IACFtB,KAAKa,OAAOU,IAAI,0CAA0CC,OAAO,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,WAG9GxB,KAAKa,OAAOC,IAAI,yCAA0CK,GDCtDM,KAEDC,MAAOC,IACN3B,KAAKS,cAAcmB,SAAS,oFA6B3B,WACDnC,GACFA,EAAcoC,UAEhBpC,EAAgB"}